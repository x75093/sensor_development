
//////General Commands//////

$ python create_temperature_table_v1.py [temperature table name]

$ python create_status_table_v1.py [status table name]

$ python update_status_table_v1.py [status table name] [str(node name)] [int(1 or 0)] [str(ip_address)] [str(user)] [str(date)]

$ python run_temp_v2.py [temperature table name] [status table name] [str(node name)] [int(max iterations)] [int(temp_loop_limit)] [int(temp_loop_sleep)]


////////////initiate temperature table//////////

NOTE: let's name our tables temp_ed1 (e.g. for board: edison1)

$ python create_temperature_table_v1.py temp_ed01

#############OUTPUT#################
Table status: CREATING
#############OUTPUT#################

////////////initiate status table///////////////


$ python create_status_table_v1.py status_ed01
NOTE: status_ed1 for edison1

#############OUTPUT#################
Table status: CREATING
#############OUTPUT#################

////////////initiate node status//////////

$ python update_status_table_v2.py status_ed1 edison1 1 10.251.22.97 Aldis date

update_status_table_v2.py requires 3 or 6 arguments via the command line
1: Status Table Name
2: Device Name (edison#)
3: Status (1 or 0)
4: IP Address
5: Username
6: Date 


#############OUTPUT#################
Table status: ACTIVE
#############OUTPUT#################

////////////initiate temperature read program//////////

root@edison:~# python run_temp_v3.py temp_ed01 status_ed1 edison1 10 5

NOTE: use run_temp_v2.py in Archive of sensor_development directory

root@edison:~# cd Archive
root@edison:~# python run_temp_v2.py temp_ed05 status_ed1 edison5 1 1 1


////////////close node status//////////

$ python update_status_table_v1.py status_table_v1 'MD 119' 1
$ python update_status_table_v1.py status_ed1 edison1 1

#############OUTPUT#################
Table status: ACTIVE
#############OUTPUT#################
